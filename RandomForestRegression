#Random Forest
#Main
rf(memory)
rf(packages)
rf(read)
################################################################################
rf(splitdata)
rf(inputs)
################################################################################
rf(default)
rf(random)
rf(grid)
################################################################################
rf(predictions)

#Functions
rf <-function(memory)
{
#Solving 'cannot allocate vector of size'. Taking additional storage from HDD to execute as RAM might not be enough 
install.packages("devtools", dependencies = TRUE)
devtools::install_github("krlmlr/ulimit")
memory.limit(size=12000) #in MB
}

rf <- function(packages)
{
library(tidyverse)
library(naniar)
library(visdat)
library(funModeling)
library(Hmisc)
library(ggplot2)
library(corrplot)
library(dplyr)
library(broom)
#Random Forest Packages
library(randomForest) 
library(mlbench)
library(ranger)
library(e1071)
library(rpart)
library(caret)
}
  
rf <- function(read)
{
##Read CSV
write.csv(Modelling_Dataset, "Dataset_for_Modelling", row.names = FALSE)
library(readr)
Modelling_Dataset <- read_csv("Dataset_for_Modelling.csv")
View(Modelling_Dataset)
summary(Modelling_Dataset)
clean_data_rf <- Modelling_Dataset[,c(1:30)] #leaving out the encoded binary variables for more performance and Salary class which is not a numeric field
}

rf <- function(splitdata)
{
# Load Dataset and Splitting data
ChosenData_Standardization <- as.data.frame(scale(clean_data_rf)) #Scaling Data
ChosenData_sample <- sample(1:nrow(clean_data_rf), size=round(0.7*nrow(clean_data_rf)), replace=FALSE)

train <- ChosenData_Standardization[ChosenData_sample,]  #Only takes rows that are in sample
test <- ChosenData_Standardization[-ChosenData_sample,]  #Omits the rows that were in sample

#Checking if the split has been executed correctly
dim(train)
dim(test)

#checking if values have been scaled
head(train)
head(test)

#Plotting  train and test sets to check that data is evenly distributed across the graph
ggplot() +
  geom_point(data=train,aes(md_earn_wne_p10,PCTFLOAN,color='teal')) +
  geom_point(data=test,aes(md_earn_wne_p10,PCTFLOAN,color='red'))+
  ggtitle("Train Set: teal   Test Set: red") +
  theme(plot.title = element_text(hjust = 0.5)) #0.5 centering title
}

##################################################################################################################################################

#Create model with default parameters
#Testing algorithm
rf <- function(inputs)
{
seed <- 123
set.seed(seed)
mtry <- sqrt(ncol(train))
}

rf <- function(default)
{
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(md_earn_wne_p10~.,
                    data=train,
                    method="ranger",
                    trControl=control) 
print(rf_default)  
ggplot(rf_default)
}

# Random Search
rf <- function(random)
{
control <- trainControl(method="repeatedcv",number=10,repeats=3,search="random")
rf_random <- train(md_earn_wne_p10~.,
                   data=train, 
                   method="ranger",
                   tuneLength=15,
                   trControl=control)
print(rf_random)
ggplot(rf_random)
}


#Grid Search
rf <- function(grid)
{
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(.mtry=c(1:30))
rf_gridsearch <- train(md_earn_wne_p10~.,
                       data=train,
                       method="ranger",
                       trControl=control)
print(rf_gridsearch)
ggplot(rf_gridsearch)
}

rf <- function(predictions)
{
  #Default prediction 
  predicted_rf_default <- predict(rf_default,type="raw", newdata = test)
  summary(predicted_rf_default)

  defaultR2 <- R2(predicted_rf_default,test$md_earn_wne_p10)
  defaultRMSE <- RMSE(predicted_rf_default,test$md_earn_wne_p10)
  defaultMAE <- MAE(predicted_rf_default,test$md_earn_wne_p10,na.rm = TRUE)

  #Random prediction
  pred_rf_random <- predict(rf_random, type = "raw", newdata=test)
  summary(pred_rf_random)

  randomR2 <- R2(pred_rf_random,test$md_earn_wne_p10)
  randomMAE <- MAE(pred_rf_random,test$md_earn_wne_p10)
  randomRMSE <- RMSE(pred_rf_random,test$md_earn_wne_p10)

  #Grid Search prediction
  predicted_rf_search <- predict(rf_gridsearch,type="raw", newdata=test)
  summary(predicted_rf_search)

  gridR2 <- R2(predicted_rf_search,test$md_earn_wne_p10)
  gridMAE <- MAE(predicted_rf_search,test$md_earn_wne_p10)
  gridRMSE <- RMSE(predicted_rf_search,test$md_earn_wne_p10,na.rm = TRUE)


  #Accuracy Measures Data frame
  Methods <- c("Default","Random","Grid Search")
  MAEList <- c(defaultMAE,randomMAE,gridMAE)
  RMSEList <- c(defaultRMSE,randomRMSE,gridRMSE)
  RSquaredList <- c(defaultR2,randomR2,gridR2)

  test_measures_rf <- data.frame(Methods,MAEList,RMSEList,RSquaredList)
  names(test_measures_rf)[names(test_measures_rf)=="Methods"] <- "Methods"
  names(test_measures_rf)[names(test_measures_rf)=="MAE"] <- "MAE"
  names(test_measures_rf)[names(test_measures_rf)=="RMSE"] <- "RMSE"
  names(test_measures_rf)[names(test_measures_rf)=="R2"] <- "R-Squared"

  test_measures_rf <- formattable::formattable(test_measures_rf)
  print(test_measures_rf)
}




